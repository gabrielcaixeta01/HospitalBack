// --------------------------------------------------
// Datasource & Generator
// --------------------------------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------------------------------
// Enums
// --------------------------------------------------
enum Sexo {
  M
  F
  O
}

// --------------------------------------------------
// Tabelas principais
// --------------------------------------------------
model Paciente {
  id           BigInt       @id @default(autoincrement())
  nome         String       @db.VarChar(120)
  cpf          String       @unique @db.VarChar(14)
  nascimento   DateTime     @db.Date
  sexo         Sexo?
  telefone     String?      @db.VarChar(40)
  email        String?      @db.VarChar(120)
  observacoes  String?      @db.Text

  consultas    Consulta[]
  internacoes  Internacao[]
  arquivos     ArquivoClinico[]

  @@map("paciente")
}

model Medico {
  id            BigInt              @id @default(autoincrement())
  nome          String              @db.VarChar(120)
  crm           String?             @unique @db.VarChar(40)
  email         String?             @db.VarChar(120)
  telefone      String?             @db.VarChar(40)

  consultas     Consulta[]
  especialidades MedicoEspecialidade[]

  @@map("medico")
}

model Especialidade {
  id     BigInt               @id @default(autoincrement())
  nome   String               @unique @db.VarChar(80)

  medicos MedicoEspecialidade[]

  @@map("especialidade")
}

// Tabela de junção many-to-many (medico <-> especialidade)
model MedicoEspecialidade {
  id               BigInt        @id @default(autoincrement())
  medicoId         BigInt
  especialidadeId  BigInt

  medico           Medico        @relation(fields: [medicoId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  especialidade    Especialidade @relation(fields: [especialidadeId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([medicoId])
  @@index([especialidadeId])
  @@unique([medicoId, especialidadeId], name: "medico_especialidade_unique_pair")

  @@map("medico_especialidade")
}

// Ex.: consultas ambulatoriais ligando paciente e médico
model Consulta {
  id          BigInt    @id @default(autoincrement())
  dataHora    DateTime
  motivo      String?   @db.VarChar(255)
  notas       String?   @db.Text

  medicoId    BigInt
  pacienteId  BigInt

  medico      Medico    @relation(fields: [medicoId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  paciente    Paciente  @relation(fields: [pacienteId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  exames      Exame[]

  @@index([medicoId])
  @@index([pacienteId])

  @@map("consulta")
}

// Ex.: resultados/pedidos de exame vinculados à consulta
model Exame {
  id          BigInt    @id @default(autoincrement())
  tipo        String    @db.VarChar(120)
  resultado   String?   @db.Text
  dataHora    DateTime?

  consultaId  BigInt
  consulta    Consulta  @relation(fields: [consultaId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([consultaId])

  @@map("exame")
}

// Leitos do hospital
model Leito {
  id         BigInt       @id @default(autoincrement())
  codigo     String       @unique @db.VarChar(40) // Ex.: A-201
  status     String       @db.VarChar(40)        // livre, ocupado, manutenção etc.

  internacoes Internacao[]

  @@map("leito")
}

// Internações ligam paciente a um leito
model Internacao {
  id           BigInt    @id @default(autoincrement())
  pacienteId   BigInt
  leitoId      BigInt
  dataEntrada  DateTime
  dataAlta     DateTime?

  paciente     Paciente  @relation(fields: [pacienteId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  leito        Leito     @relation(fields: [leitoId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([pacienteId])
  @@index([leitoId])

  @@map("internacao")
}

// Arquivos clínicos do paciente (PDFs, imagens, laudos etc.)
model ArquivoClinico {
  id          BigInt    @id @default(autoincrement())
  pacienteId  BigInt
  tipo        String?   @db.VarChar(80)  // ex.: exame, receita, atestado
  titulo      String?   @db.VarChar(160)
  url         String    @db.VarChar(400)
  criadoEm    DateTime  @default(now())

  paciente    Paciente  @relation(fields: [pacienteId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([pacienteId])

  @@map("arquivo_clinico")
}

// Usuários da aplicação (autenticação/controle de acesso)
model User {
  id         BigInt   @id @default(autoincrement())
  nome       String   @db.VarChar(120)
  email      String   @unique @db.VarChar(120)
  senha      String   @db.VarChar(255)
  profilepic String?  @db.Text
  criadoEm   DateTime @default(now())

  @@map("usuario")
}